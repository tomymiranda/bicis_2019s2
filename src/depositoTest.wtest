import accesorio.*
import bicis.*
import deposito.*

test "las bicis rapidas son la bici1 y bici2" {
	const bici1 = new Bici(rodado = 28, largoEnCm = 150, marca = "Olmo")
	bici1.agregarAccesorio(new Farolito())
	const bici2 = new Bici(rodado = 26, largoEnCm = 110, marca = "legnano")
	bici2.agregarAccesorio(new Farolito())
	bici2.agregarAccesorio(new Canasto(volumen = 8))
	bici2.agregarAccesorio(new MorralDeBici(largo = 21, ojoDeGato = true))
	const bici3 = new Bici(rodado = 20, largoEnCm = 90, marca = "legnano")
	bici3.agregarAccesorio(new MorralDeBici(largo = 6, ojoDeGato = false))
	const deposito = new Deposito()
	deposito.agregarBici(bici1)
	deposito.agregarBici(bici2)
	deposito.agregarBici(bici3)
	assert.equals([ bici1, bici2 ], deposito.coleccionDeBicisRapidas())
}

test "las marcas sin repetir son Olmo y legnano" {
	const bici1 = new Bici(rodado = 28, largoEnCm = 150, marca = "Olmo")
	bici1.agregarAccesorio(new Farolito())
	const bici2 = new Bici(rodado = 26, largoEnCm = 110, marca = "legnano")
	bici2.agregarAccesorio(new Farolito())
	bici2.agregarAccesorio(new Canasto(volumen = 8))
	bici2.agregarAccesorio(new MorralDeBici(largo = 21, ojoDeGato = true))
	const bici3 = new Bici(rodado = 20, largoEnCm = 90, marca = "legnano")
	bici3.agregarAccesorio(new MorralDeBici(largo = 6, ojoDeGato = false))
	const deposito = new Deposito()
	deposito.agregarBici(bici1)
	deposito.agregarBici(bici2)
	deposito.agregarBici(bici3)
	assert.equals(#{ "Olmo", "legnano" }, deposito.coleccionDeMarcasSinRepetir())
}

test "el deposito no es nocturno" {
	const bici1 = new Bici(rodado = 28, largoEnCm = 150, marca = "Olmo")
	bici1.agregarAccesorio(new Farolito())
	const bici2 = new Bici(rodado = 26, largoEnCm = 110, marca = "legnano")
	bici2.agregarAccesorio(new Farolito())
	bici2.agregarAccesorio(new Canasto(volumen = 8))
	bici2.agregarAccesorio(new MorralDeBici(largo = 21, ojoDeGato = true))
	const bici3 = new Bici(rodado = 20, largoEnCm = 90, marca = "legnano")
	bici3.agregarAccesorio(new MorralDeBici(largo = 6, ojoDeGato = false))
	const deposito = new Deposito()
	deposito.agregarBici(bici1)
	deposito.agregarBici(bici2)
	deposito.agregarBici(bici3)
	assert.notThat(deposito.esNocturno())
}

test "el deposito tiene una bici para llevar 10kg de carga" {
	const bici1 = new Bici(rodado = 28, largoEnCm = 150, marca = "Olmo")
	bici1.agregarAccesorio(new Farolito())
	const bici2 = new Bici(rodado = 26, largoEnCm = 110, marca = "legnano")
	bici2.agregarAccesorio(new Farolito())
	bici2.agregarAccesorio(new Canasto(volumen = 8))
	bici2.agregarAccesorio(new MorralDeBici(largo = 21, ojoDeGato = true))
	const bici3 = new Bici(rodado = 20, largoEnCm = 90, marca = "legnano")
	bici3.agregarAccesorio(new MorralDeBici(largo = 6, ojoDeGato = false))
	const deposito = new Deposito()
	deposito.agregarBici(bici1)
	deposito.agregarBici(bici2)
	deposito.agregarBici(bici3)
	assert.that(deposito.tieneBiciParaLlevarCargaDe_(10))
}

test "el deposito no tiene una bici para llevar 50kg de carga" {
	const bici1 = new Bici(rodado = 28, largoEnCm = 150, marca = "Olmo")
	bici1.agregarAccesorio(new Farolito())
	const bici2 = new Bici(rodado = 26, largoEnCm = 110, marca = "legnano")
	bici2.agregarAccesorio(new Farolito())
	bici2.agregarAccesorio(new Canasto(volumen = 8))
	bici2.agregarAccesorio(new MorralDeBici(largo = 21, ojoDeGato = true))
	const bici3 = new Bici(rodado = 20, largoEnCm = 90, marca = "legnano")
	bici3.agregarAccesorio(new MorralDeBici(largo = 6, ojoDeGato = false))
	const deposito = new Deposito()
	deposito.agregarBici(bici1)
	deposito.agregarBici(bici2)
	deposito.agregarBici(bici3)
	assert.notThat(deposito.tieneBiciParaLlevarCargaDe_(50))
}
